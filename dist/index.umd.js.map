{"version":3,"file":"index.umd.js","sources":["../src/core/container.ts","../src/core/animation.ts","../src/dom/style.ts","../src/core/bro-toastify.tsx","../src/adapters/react/Toaster.tsx","../src/adapters/react/index.ts","../src/adapters/angular/index.ts","../src/adapters/vanilla/index.ts","../src/dom/renderer.ts","../src/index.ts"],"sourcesContent":["import { BroToastifyToastifyOptions } from \"./types\";\r\n\r\nconst containers: Map<string, HTMLElement> = new Map()\r\n\r\nexport function createContainer(position: BroToastifyToastifyOptions['position']): HTMLElement | null {\r\n    if (typeof window === 'undefined') {\r\n        return null; // Return null during SSR\r\n    }\r\n\r\n    if (containers.has(position!)) {\r\n        const existingContainer = containers.get(position!)!;\r\n        if (document.body.contains(existingContainer)) {\r\n            return existingContainer;\r\n        } else {\r\n            // Container exists in our map but not in DOM, re-append it\r\n            document.body.appendChild(existingContainer);\r\n            return existingContainer;\r\n        }\r\n    }\r\n    console.debug('Creating container for position:', position);\r\n\r\n\r\n    const container = document.createElement('div')\r\n    container.className = `broToastify-container broToastify-${position}`\r\n    container.setAttribute('role', 'region')\r\n    container.setAttribute('aria-live', 'polite')\r\n    container.setAttribute('aria-atomic', 'true')\r\n\r\n    switch (position) {\r\n        case 'top-right':\r\n            container.style.top = '1rem'\r\n            container.style.right = '1rem'\r\n            break\r\n        case 'top-left':\r\n            container.style.top = '1rem'\r\n            container.style.left = '1rem'\r\n            break\r\n        case 'top-center':\r\n            container.style.top = '1rem'\r\n            container.style.left = '50%'\r\n            container.style.transform = 'translateX(-50%)'\r\n            break\r\n        case 'bottom-right':\r\n            container.style.bottom = '1rem'\r\n            container.style.right = '1rem'\r\n            break\r\n        case 'bottom-left':\r\n            container.style.bottom = '1rem'\r\n            container.style.left = '1rem'\r\n            break\r\n        case 'bottom-center':\r\n            container.style.bottom = '1rem'\r\n            container.style.left = '50%'\r\n            container.style.transform = 'translateX(-50%)'\r\n            break\r\n        default:\r\n            console.error(`Invalid position: ${position}`);\r\n            break;\r\n    }\r\n\r\n    document.body.appendChild(container)\r\n\r\n    containers.set(position!, container)\r\n\r\n    return container\r\n}\r\n\r\n\r\nexport function getContainer(position: BroToastifyToastifyOptions[\"position\"]): HTMLElement | null {\r\n    if (typeof window === \"undefined\") {\r\n        return null // Return null during SSR\r\n    }\r\n\r\n    // If container exists, return it\r\n    if (containers.has(position!)) {\r\n        const container = containers.get(position!)!\r\n\r\n        // Make sure it's still in the DOM\r\n        if (!document.body.contains(container)) {\r\n            document.body.appendChild(container)\r\n        }\r\n\r\n        return container\r\n    }\r\n\r\n    // Otherwise create a new one\r\n    return createContainer(position)\r\n}\r\n\r\n\r\nexport function removeAllContainers(): void {\r\n    if (typeof window === \"undefined\") {\r\n      return // Skip during SSR\r\n    }\r\n  \r\n    console.debug(\"Removing all containers\")\r\n    containers.forEach((container) => {\r\n      if (document.body.contains(container)) {\r\n        container.remove()\r\n      }\r\n    })\r\n    containers.clear()\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n","\r\nexport type AnimationType = 'fade' | 'slide' | 'zoom' | 'flip' | 'bounce' | 'none';\r\n\r\nexport type AnimationDirection = 'top' | 'right' | 'bottom' | 'left';\r\n\r\nexport interface AnimationOptions {\r\n  type: AnimationType;\r\n  duration: number;\r\n  direction?: AnimationDirection;\r\n  easing?: string;\r\n}\r\n\r\nexport const defaultAnimationOptions: AnimationOptions = {\r\n  type: 'fade',\r\n  duration: 300,\r\n  easing: 'ease'\r\n};\r\n\r\nexport function getAnimationKeyframes(type: AnimationType, direction?: AnimationDirection): string {\r\n  switch (type) {\r\n    case 'fade':\r\n      return `\r\n        @keyframes broToastify-fade-in {\r\n          from { opacity: 0; }\r\n          to { opacity: 1; }\r\n        }\r\n        @keyframes broToastify-fade-out {\r\n          from { opacity: 1; }\r\n          to { opacity: 0; }\r\n        }\r\n      `;\r\n    \r\n    case 'slide':\r\n      let translateFrom = 'translateY(-100%)';\r\n      let translateTo = 'translateY(0)';\r\n      \r\n      if (direction === 'right') {\r\n        translateFrom = 'translateX(100%)';\r\n        translateTo = 'translateX(0)';\r\n      } else if (direction === 'bottom') {\r\n        translateFrom = 'translateY(100%)';\r\n        translateTo = 'translateY(0)';\r\n      } else if (direction === 'left') {\r\n        translateFrom = 'translateX(-100%)';\r\n        translateTo = 'translateX(0)';\r\n      }\r\n      \r\n      return `\r\n        @keyframes broToastify-slide-in {\r\n          from { transform: ${translateFrom}; opacity: 0; }\r\n          to { transform: ${translateTo}; opacity: 1; }\r\n        }\r\n        @keyframes broToastify-slide-out {\r\n          from { transform: ${translateTo}; opacity: 1; }\r\n          to { transform: ${translateFrom}; opacity: 0; }\r\n        }\r\n      `;\r\n    \r\n    case 'zoom':\r\n      return `\r\n        @keyframes broToastify-zoom-in {\r\n          from { transform: scale(0.5); opacity: 0; }\r\n          to { transform: scale(1); opacity: 1; }\r\n        }\r\n        @keyframes broToastify-zoom-out {\r\n          from { transform: scale(1); opacity: 1; }\r\n          to { transform: scale(0.5); opacity: 0; }\r\n        }\r\n      `;\r\n    \r\n    case 'flip':\r\n      return `\r\n        @keyframes broToastify-flip-in {\r\n          from { transform: perspective(400px) rotateX(90deg); opacity: 0; }\r\n          to { transform: perspective(400px) rotateX(0deg); opacity: 1; }\r\n        }\r\n        @keyframes broToastify-flip-out {\r\n          from { transform: perspective(400px) rotateX(0deg); opacity: 1; }\r\n          to { transform: perspective(400px) rotateX(90deg); opacity: 0; }\r\n        }\r\n      `;\r\n    \r\n    case 'bounce':\r\n      return `\r\n        @keyframes broToastify-bounce-in {\r\n          0% { transform: scale(0.5); opacity: 0; }\r\n          50% { transform: scale(1.05); opacity: 0.8; }\r\n          100% { transform: scale(1); opacity: 1; }\r\n        }\r\n        @keyframes broToastify-bounce-out {\r\n          0% { transform: scale(1); opacity: 1; }\r\n          50% { transform: scale(1.05); opacity: 0.8; }\r\n          100% { transform: scale(0.5); opacity: 0; }\r\n        }\r\n      `;\r\n    \r\n    case 'none':\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\n\r\nexport function applyAnimation(\r\n  element: HTMLElement, \r\n  options: AnimationOptions = defaultAnimationOptions,\r\n  isEnter: boolean = true\r\n): void {\r\n  const { type, duration, easing } = options;\r\n  \r\n  if (type === 'none') return;\r\n  \r\n  const animationName = `broToastify-${type}-${isEnter ? 'in' : 'out'}`;\r\n  \r\n  element.style.animation = `${animationName} ${duration}ms ${easing} forwards`;\r\n  \r\n  // Clean up after animation completes\r\n  element.addEventListener('animationend', () => {\r\n    element.style.animation = '';\r\n  }, { once: true });\r\n}\r\n","import { getAnimationKeyframes } from \"../core/animation\"\r\n\r\n// Flag to track if styles have been injected\r\nlet stylesInjected = false\r\n\r\nexport function getBroToastifyStyles(): string {\r\n  return `\r\n    .broToastify-container {\r\n      position: fixed;\r\n      z-index: 9999;\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 0.5rem;\r\n      max-width: 100%;\r\n      max-height: 100vh;\r\n      overflow-y: auto;\r\n      padding: 1rem;\r\n    }\r\n    \r\n    .broToastify-notification {\r\n      position: relative;\r\n      min-width: 300px;\r\n      max-width: 500px;\r\n      padding: 1rem;\r\n      border-radius: 0.375rem;\r\n      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n      overflow: hidden;\r\n      display: flex;\r\n      flex-direction: column;\r\n      opacity: 1 !important;\r\n      visibility: visible !important;\r\n    }\r\n\r\n    .broToastify-default {\r\n      background-color: rgb(240, 241, 240);\r\n      color: #333;\r\n    }\r\n    \r\n    .broToastify-success {\r\n      background-color: #10B981;\r\n      color: white;\r\n    }\r\n    \r\n    .broToastify-error {\r\n      background-color: #EF4444;\r\n      color: white;\r\n    }\r\n    \r\n    .broToastify-info {\r\n      background-color: #3B82F6;\r\n      color: white;\r\n    }\r\n    \r\n    .broToastify-warning {\r\n      background-color: #F59E0B;\r\n      color: white;\r\n    }\r\n\r\n    .broToastify-loader-container {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.5rem;\r\n    }   \r\n\r\n    .broToastify-loader {\r\n      border: 4px solid #f3f3f3;\r\n      border-top: 4px solid #3498db;\r\n      border-radius: 50%;\r\n      width: 20px;\r\n      height: 20px;\r\n      animation: spin 1s linear infinite;\r\n    }\r\n\r\n    .broToastify-loader-message {\r\n      font-size: 0.875rem;\r\n      color: #333;\r\n      animation: fadeIn 0.3s ease-in-out;\r\n    }\r\n\r\n    @keyframes spin {\r\n      0% { transform: rotate(0deg); }\r\n      100% { transform: rotate(360deg); }\r\n    }\r\n\r\n    @keyframes fadeIn {\r\n      0% { opacity: 0; transform: translateY(-10px); }\r\n      100% { opacity: 1; transform: translateY(0); }\r\n    }\r\n    \r\n    .broToastify-title {\r\n      font-weight: bold;\r\n      margin-bottom: 0.25rem;\r\n      font-size: 1rem;\r\n    }\r\n    \r\n    .broToastify-message {\r\n      font-size: 0.875rem;\r\n    }\r\n    \r\n    .broToastify-close {\r\n      position: absolute;\r\n      top: 0.5rem;\r\n      right: 0.5rem;\r\n      background: transparent;\r\n      border: none;\r\n      color: currentColor;\r\n      font-size: 1.25rem;\r\n      cursor: pointer;\r\n      opacity: 0.7;\r\n      transition: opacity 0.2s;\r\n    }\r\n    \r\n    .broToastify-close:hover {\r\n      opacity: 1;\r\n    }\r\n    \r\n    .broToastify-top-right {\r\n      top: 1rem;\r\n      right: 1rem;\r\n      align-items: flex-end;\r\n    }\r\n    \r\n    .broToastify-top-left {\r\n      top: 1rem;\r\n      left: 1rem;\r\n      align-items: flex-start;\r\n    }\r\n    \r\n    .broToastify-bottom-right {\r\n      bottom: 1rem;\r\n      right: 1rem;\r\n      align-items: flex-end;\r\n    }\r\n    \r\n    .broToastify-bottom-left {\r\n      bottom: 1rem;\r\n      left: 1rem;\r\n      align-items: flex-start;\r\n    }\r\n    \r\n    .broToastify-top-center {\r\n      top: 1rem;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      align-items: center;\r\n    }\r\n    \r\n    .broToastify-bottom-center {\r\n      bottom: 1rem;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      align-items: center;\r\n    }\r\n    \r\n    ${getAnimationKeyframes ? getAnimationKeyframes(\"fade\") : \"\"}\r\n    ${getAnimationKeyframes ? getAnimationKeyframes(\"slide\", \"top\") : \"\"}\r\n    ${getAnimationKeyframes ? getAnimationKeyframes(\"zoom\") : \"\"}\r\n    \r\n    @media (max-width: 576px) {\r\n      .broToastify-container {\r\n        width: 100%;\r\n        padding: 0 1rem;\r\n      }\r\n      \r\n      .broToastify-notification {\r\n        min-width: 100%;\r\n        max-width: 100%;\r\n      }\r\n      \r\n      .broToastify-top-center,\r\n      .broToastify-top-right,\r\n      .broToastify-top-left {\r\n        top: 0;\r\n        right: 0;\r\n        left: 0;\r\n        transform: none;\r\n      }\r\n      \r\n      .broToastify-bottom-center,\r\n      .broToastify-bottom-right,\r\n      .broToastify-bottom-left {\r\n        bottom: 0;\r\n        right: 0;\r\n        left: 0;\r\n        transform: none;\r\n      }\r\n    }\r\n  `\r\n}\r\n\r\nexport function injectStyles() {\r\n  if (typeof window === \"undefined\" || stylesInjected) return\r\n\r\n  const styleId = \"bro-toastify-styles\"\r\n  if (document.getElementById(styleId)) {\r\n    stylesInjected = true\r\n    return\r\n  }\r\n\r\n  try {\r\n    const style = document.createElement(\"style\")\r\n    style.id = styleId\r\n    style.innerHTML = getBroToastifyStyles()\r\n    document.head.appendChild(style)\r\n    stylesInjected = true\r\n    console.log(\"Bro-toastify styles injected\")\r\n  } catch (error) {\r\n    console.error(\"Failed to inject bro-toastify styles:\", error)\r\n  }\r\n}\r\n","import { BroToastify, BroToastifyToastifyOptions } from \"./types\";\r\nimport { createContainer } from './container';\r\nimport { injectStyles } from \"../dom/style\";\r\n\r\nif (typeof window !== 'undefined') {\r\n    injectStyles();\r\n}\r\n\r\n//Default\r\nconst defaultOptions: Partial<BroToastifyToastifyOptions> = {\r\n    type: \"default\",\r\n    duration: 3000,\r\n    position: \"top-right\",\r\n    dismissible: true,\r\n    pauseOnHover: true,\r\n    customIcon: undefined,\r\n    customClass: undefined,\r\n}\r\n\r\n// Store for active toasts\r\nconst broToastifys: Map<string, BroToastify> = new Map();\r\n\r\n//Event emitter for toast events\r\nconst listeners: Map<string, Function[]> = new Map();\r\n\r\n//Generate Unique Id\r\nconst generateId = () => {\r\n    return Date.now().toString(36) + Math.random().toString(36).substring(2, 5);\r\n}\r\n\r\n//Create toast function\r\nexport function createBroToastify(options: BroToastifyToastifyOptions): BroToastify | undefined {\r\n    if (typeof window === 'undefined') {\r\n        return undefined; // Prevent toast creation during SSR\r\n    }\r\n\r\n    const mergedOptions = { ...defaultOptions, ...options };\r\n    const id = generateId();\r\n\r\n    const BroToastify: BroToastify = {\r\n        ...mergedOptions,\r\n        id,\r\n        createdAt: Date.now(),\r\n    }\r\n\r\n    broToastifys.set(id, BroToastify);\r\n\r\n    //container exits\r\n    createContainer(mergedOptions.position!);\r\n\r\n    //Emit event\r\n    emit('create', BroToastify);\r\n\r\n    //Auto dismiss\r\n    if (mergedOptions.duration && mergedOptions.duration > 0) {\r\n        setTimeout(() => {\r\n            dismissBroToastify(id);\r\n        }, mergedOptions.duration);\r\n    }\r\n\r\n    return BroToastify\r\n}\r\n\r\n//dismiss broToastify\r\nexport function dismissBroToastify(id: string): void {\r\n    if (typeof window === \"undefined\") {\r\n      return // Skip during SSR\r\n    }\r\n  \r\n    const BroToastify = Array.from(broToastifys.values()).find((t) => t.id === id)\r\n  \r\n    if (BroToastify) {\r\n      broToastifys.delete(id) // Remove the toast from the Map\r\n      emit(\"dismiss\", BroToastify)\r\n  \r\n      if (BroToastify.onClose) {\r\n        BroToastify.onClose()\r\n      }\r\n    }\r\n  }\r\n\r\n//clear all broToastify\r\nexport function clearBroToastify(): void {\r\n    if (typeof window === 'undefined') {\r\n        return; // Prevent execution during SSR\r\n    }\r\n\r\n    const allBroToastifys = Array.from(broToastifys.values());\r\n    allBroToastifys.forEach((broToastify) => {\r\n        dismissBroToastify(broToastify.id);\r\n    })\r\n}\r\n\r\n\r\n//subscribe to event\r\nexport function on(event: string, callback: Function): { off: () => void } {\r\n    if (!listeners.has(event)) {\r\n        listeners.set(event, []);\r\n    }\r\n\r\n    listeners.get(event)!.push(callback);\r\n\r\n    //return unsubscribe function\r\n    return {\r\n        off: () => {\r\n            const callbacks = listeners.get(event);\r\n            if (callbacks) {\r\n                const index = callbacks.indexOf(callback);\r\n                if (index !== -1) {\r\n                    callbacks.splice(index, 1);\r\n                }\r\n            }\r\n        },\r\n    }\r\n}\r\n\r\n//emit event\r\nfunction emit(event: string, data: any): void {\r\n    const callbacks = listeners.get(event);\r\n    if (callbacks) {\r\n        callbacks.forEach((callback) => callback(data));\r\n    }\r\n}\r\n\r\n//convenience methods\r\nconst toast = {\r\n    show: (message: string, options?: Partial<BroToastifyToastifyOptions>) =>\r\n        createBroToastify({ message, type: 'show', ...options }),\r\n    success: (message: string, options?: Partial<BroToastifyToastifyOptions>) =>\r\n        createBroToastify({ message, type: 'success', ...options }),\r\n    error: (message: string, options?: Partial<BroToastifyToastifyOptions>) =>\r\n        createBroToastify({ message, type: 'error', ...options }),\r\n    info: (message: string, options?: Partial<BroToastifyToastifyOptions>) =>\r\n        createBroToastify({ message, type: 'info', ...options }),\r\n    warning: (message: string, options?: Partial<BroToastifyToastifyOptions>) =>\r\n        createBroToastify({ message, type: 'warning', ...options }),\r\n    loading: (message: string, options?: Partial<BroToastifyToastifyOptions>) =>\r\n        createBroToastify({ message, type: 'loading', ...options }),\r\n    promises: (\r\n        promise: Promise<any>,\r\n        message: { loading: string, success: string, error: string },\r\n        options?: Partial<BroToastifyToastifyOptions>\r\n    ) => {\r\n        if (typeof window === 'undefined') {\r\n            return undefined; // Prevent execution during SSR\r\n        }\r\n\r\n        const id = generateId();\r\n\r\n        createBroToastify({ id, message: message.loading, type: 'loading', ...options });\r\n\r\n        promise\r\n            .then((result) => {\r\n                dismissBroToastify(id)\r\n                createBroToastify({ message: message.success, type: 'success', ...options });\r\n                return result\r\n            })\r\n            .catch((error) => {\r\n                dismissBroToastify(id)\r\n                createBroToastify({ message: message.error, type: 'error', ...options });\r\n                throw error\r\n            });\r\n        return { id };\r\n    },\r\n    isToastActive: (id: string): boolean => {\r\n        return !!Array.from(broToastifys.values()).find((toast) => toast.id === id);\r\n    },\r\n    dismiss: (id: string) => dismissBroToastify(id),\r\n    dismissible: (id: string) => dismissBroToastify(id),\r\n    clearAll: clearBroToastify,\r\n}\r\n\r\nexport default toast;\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport { on, dismissBroToastify } from '../../core/bro-toastify';\r\nimport type { BroToastify, BroToastifyToastifyOptions } from '../../core/types';\r\nimport { injectStyles } from '../../dom/style';\r\n\r\nexport const Toaster = ({\r\n  position = 'top-right',\r\n  newestOnTop = false,\r\n  dismissible = true,\r\n}: {\r\n  position?: BroToastifyToastifyOptions['position'];\r\n  newestOnTop?: boolean;\r\n  dismissible?: boolean;\r\n}) => {\r\n  const [toasts, setToasts] = useState<BroToastify[]>([]);\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setMounted(true);\r\n    injectStyles();\r\n\r\n    const createHandler = (toast: BroToastify) => {\r\n      setToasts((prev) => (newestOnTop ? [toast, ...prev] : [...prev, toast]));\r\n    };\r\n\r\n    const dismissHandler = (toast: BroToastify) => {\r\n      setToasts((prev) => prev.filter((t) => t.id !== toast.id));\r\n    };\r\n\r\n    const createListener = on('create', createHandler);\r\n    const dismissListener = on('dismiss', dismissHandler);\r\n\r\n    return () => {\r\n      createListener.off();\r\n      dismissListener.off();\r\n    };\r\n  }, [newestOnTop]);\r\n\r\n  useEffect(() => {\r\n    const timers = toasts.map((toast) => {\r\n      if (toast.duration && toast.duration > 0) {\r\n        return setTimeout(() => {\r\n          dismissBroToastify(toast.id);\r\n        }, toast.duration);\r\n      }\r\n      return null;\r\n    });\r\n\r\n    return () => {\r\n      timers.forEach((timer) => timer && clearTimeout(timer));\r\n    };\r\n  }, [toasts]);\r\n\r\n  if (!mounted) return null;\r\n\r\n  return createPortal(\r\n    <div className={`broToastify-container broToastify-${position}`}>\r\n      {toasts.map((toast) => (\r\n        <div\r\n          key={toast.id}\r\n          id={`broToastify-${toast.id}`}\r\n          className={`broToastify-notification broToastify-${toast.type}`}\r\n        >\r\n          {toast.title && <div className=\"broToastify-title\">{toast.title}</div>}\r\n          <div className=\"broToastify-message\">{toast.message}</div>\r\n          {dismissible && (\r\n            <button\r\n              className=\"broToastify-close\"\r\n              aria-label=\"Close\"\r\n              onClick={() => dismissBroToastify(toast.id)}\r\n            >\r\n              ×\r\n            </button>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>,\r\n    document.body\r\n  );\r\n};\r\n\r\nToaster.displayName = 'Toaster';","import { Toaster } from './Toaster';\r\nimport coreToast from '../../core/bro-toastify';\r\nimport type { BroToastifyToastifyOptions } from '../../core/types';\r\n\r\nexport { Toaster };\r\n\r\nexport const broToastify = () => ({\r\n    show: (message: string, options?: Partial<BroToastifyToastifyOptions>) =>\r\n        coreToast.show(message, options),\r\n    success: (message: string, options?: Partial<BroToastifyToastifyOptions>) =>\r\n        coreToast.success(message, options),\r\n    error: (message: string, options?: Partial<BroToastifyToastifyOptions>) =>\r\n        coreToast.error(message, options),\r\n    info: (message: string, options?: Partial<BroToastifyToastifyOptions>) =>\r\n        coreToast.info(message, options),\r\n    warning: (message: string, options?: Partial<BroToastifyToastifyOptions>) =>\r\n        coreToast.warning(message, options),\r\n    loading: (message: string, options?: Partial<BroToastifyToastifyOptions>) =>\r\n        coreToast.loading(message, options),\r\n    promises: (\r\n        promise: Promise<any>,\r\n        messages: { loading: string; success: string; error: string },\r\n        options?: Partial<BroToastifyToastifyOptions>\r\n    ) => coreToast.promises(promise, messages, options),\r\n    isToastActive: (id: string) => coreToast.isToastActive(id),\r\n    dismiss: (id: string) => coreToast.dismiss(id),\r\n    clearAll: () => coreToast.clearAll(),\r\n});\r\n\r\n// import coreToast from \"../../core/bro-toastify\"\r\n// import type { BroToastifyToastifyOptions } from \"../../core/types\"\r\n// import { injectStyles } from \"../../dom/style\"\r\n// import { on } from \"../../core/bro-toastify\"\r\n// import type { BroToastify } from \"../../core/types\"\r\n\r\n// // Client-side initialization script that runs when this module is imported on the client\r\n// if (typeof window !== \"undefined\") {\r\n//     // Inject styles immediately\r\n//     injectStyles()\r\n\r\n//     // Set up a MutationObserver to detect when Toaster placeholders are added to the DOM\r\n//     const observer = new MutationObserver((mutations) => {\r\n//         mutations.forEach((mutation) => {\r\n//             if (mutation.type === \"childList\") {\r\n//                 mutation.addedNodes.forEach((node) => {\r\n//                     if (node instanceof HTMLElement && node.hasAttribute(\"data-bro-toastify\")) {\r\n//                         const position = node.getAttribute(\"data-position\") || \"top-right\"\r\n//                         const newestOnTop = node.getAttribute(\"data-newest-on-top\") !== \"false\"\r\n//                         const dismissible = node.getAttribute(\"data-dismissible\") !== \"false\"\r\n\r\n//                         // Initialize the toast container\r\n//                         initToastContainer(position, newestOnTop, dismissible)\r\n//                     }\r\n//                 })\r\n//             }\r\n//         })\r\n//     })\r\n\r\n//     // Start observing the document body for Toaster placeholders\r\n//     observer.observe(document.body, { childList: true, subtree: true })\r\n// }\r\n\r\n// // Global state for toast management\r\n// const toastState = {\r\n//     containers: new Map<string, HTMLElement>(),\r\n//     activeToasts: new Map<string, HTMLElement>(),\r\n//     listeners: {\r\n//         create: null as { off: () => void } | null,\r\n//         dismiss: null as { off: () => void } | null,\r\n//     },\r\n//     initialized: new Set<string>(),\r\n// }\r\n\r\n// // Initialize toast container\r\n// function initToastContainer(position: string, newestOnTop: boolean, dismissible: boolean) {\r\n//     if (typeof window === \"undefined\") return\r\n\r\n//     // Create a unique key for this configuration\r\n//     const configKey = `${position}-${newestOnTop}-${dismissible}`\r\n\r\n//     // Skip if already initialized with this config\r\n//     if (toastState.initialized.has(configKey)) return\r\n\r\n//     console.log(\"Initializing toast container:\", { position, newestOnTop, dismissible })\r\n//     toastState.initialized.add(configKey)\r\n\r\n//     // Create or update container\r\n//     let container = document.querySelector(`.broToastify-container.broToastify-${position}`) as HTMLDivElement\r\n//     if (!container) {\r\n//         container = document.createElement(\"div\")\r\n//         container.className = `broToastify-container broToastify-${position}`\r\n//         container.style.display = \"flex\"\r\n//         document.body.appendChild(container)\r\n//         console.log(\"Created container:\", container)\r\n//     } else {\r\n//         container.style.display = \"flex\"\r\n//         console.log(\"Found existing container:\", container)\r\n//     }\r\n\r\n//     // Store the container\r\n//     toastState.containers.set(position, container)\r\n\r\n//     // Clean up old listeners\r\n//     if (toastState.listeners.create) toastState.listeners.create.off()\r\n//     if (toastState.listeners.dismiss) toastState.listeners.dismiss.off()\r\n\r\n//     // Set up create handler\r\n//     toastState.listeners.create = on(\"create\", (toast: BroToastify) => {\r\n//         if (!container || !toast) {\r\n//             console.error(\"Cannot create toast: missing container or toast\", { container, toast })\r\n//             return\r\n//         }\r\n\r\n//         console.log(\"Received create event for toast:\", toast)\r\n\r\n//         let toastElement = toastState.activeToasts.get(toast.id)\r\n\r\n//         if (!toastElement) {\r\n//             toastElement = document.createElement(\"div\")\r\n//             toastElement.id = `broToastify-${toast.id}`\r\n//             toastElement.className = `broToastify-notification broToastify-${toast.type}`\r\n//             toastElement.setAttribute(\"data-id\", toast.id)\r\n\r\n//             try {\r\n//                 if (newestOnTop) {\r\n//                     container.prepend(toastElement)\r\n//                 } else {\r\n//                     container.appendChild(toastElement)\r\n//                 }\r\n//                 console.log(\"Created and appended toast element:\", toastElement)\r\n//             } catch (error) {\r\n//                 console.error(\"Failed to append toast element:\", error)\r\n//                 return\r\n//             }\r\n\r\n//             toastState.activeToasts.set(toast.id, toastElement)\r\n//         }\r\n\r\n//         try {\r\n//             toastElement.innerHTML = `\r\n//         <div class=\"broToastify-title\">${toast.title || \"\"}</div>\r\n//         <div class=\"broToastify-message\">${toast.message}</div>\r\n//         ${dismissible ? `<button class=\"broToastify-close\" aria-label=\"Close\">×</button>` : \"\"}\r\n//       `\r\n//             console.log(\"Updated toast element HTML:\", toastElement)\r\n//         } catch (error) {\r\n//             console.error(\"Failed to update toast HTML:\", error)\r\n//         }\r\n\r\n//         if (dismissible) {\r\n//             const closeButton = toastElement.querySelector(\".broToastify-close\")\r\n//             if (closeButton) {\r\n//                 closeButton.addEventListener(\"click\", () => {\r\n//                     if (container && toastElement) {\r\n//                         container.removeChild(toastElement)\r\n//                         toastState.activeToasts.delete(toast.id)\r\n//                         coreToast.dismiss(toast.id)\r\n//                         console.log(\"Dismissed toast:\", toast.id)\r\n//                     }\r\n//                 })\r\n//                 console.log(\"Added close button listener for toast:\", toast.id)\r\n//             }\r\n//         }\r\n\r\n//         // Auto-dismiss\r\n//         if (toast.duration && toast.duration > 0) {\r\n//             setTimeout(() => {\r\n//                 if (container && toastElement && container.contains(toastElement)) {\r\n//                     container.removeChild(toastElement)\r\n//                     toastState.activeToasts.delete(toast.id)\r\n//                     console.log(\"Auto-dismissed toast:\", toast.id)\r\n//                 }\r\n//             }, toast.duration)\r\n//         }\r\n//     })\r\n\r\n//     // Set up dismiss handler\r\n//     toastState.listeners.dismiss = on(\"dismiss\", (toast: BroToastify) => {\r\n//         const id = toast.id\r\n//         const toastElement = toastState.activeToasts.get(id)\r\n//         if (toastElement && container && container.contains(toastElement)) {\r\n//             container.removeChild(toastElement)\r\n//             toastState.activeToasts.delete(id)\r\n//             console.log(\"Handled dismiss event for toast:\", id)\r\n//         }\r\n//     })\r\n// }\r\n\r\n// // Export the Toaster component\r\n// export { Toaster } from \"./Toaster\"\r\n\r\n// // Export the toast functions\r\n// export { default as toast } from \"../../core/bro-toastify\"\r\n\r\n// // Re-export the core toast for direct usage\r\n// export default coreToast\r\n\r\n// // Hook for using toast (for client components)\r\n// export const broToastify = () => {\r\n//     return {\r\n//         show: (message: string, options?: Partial<BroToastifyToastifyOptions>) => coreToast.show(message, options),\r\n//         success: (message: string, options?: Partial<BroToastifyToastifyOptions>) => coreToast.success(message, options),\r\n//         error: (message: string, options?: Partial<BroToastifyToastifyOptions>) => coreToast.error(message, options),\r\n//         info: (message: string, options?: Partial<BroToastifyToastifyOptions>) => coreToast.info(message, options),\r\n//         warning: (message: string, options?: Partial<BroToastifyToastifyOptions>) => coreToast.warning(message, options),\r\n//         loading: (message: string, options?: Partial<BroToastifyToastifyOptions>) => coreToast.loading(message, options),\r\n//         promises: (\r\n//             promise: Promise<any>,\r\n//             messages: { loading: string; success: string; error: string },\r\n//             options?: Partial<BroToastifyToastifyOptions>,\r\n//         ) => coreToast.promises(promise, messages, options),\r\n//         isToastActive: (id: string) => coreToast.isToastActive(id),\r\n//         dismiss: (id: string) => coreToast.dismiss(id),\r\n//         dismissible: (id: string) => coreToast.dismiss(id),\r\n//         clearAll: () => coreToast.clearAll(),\r\n//     }\r\n// }\r\n\r\n// import coreToast, { on } from \"../../core/bro-toastify\"\r\n// import type { BroToastify, BroToastifyToastifyOptions } from \"../../core/types\"\r\n// import { injectStyles } from \"../../dom/style\"\r\n// import { Toaster } from \"./Toaster\" // Import the Toaster component\r\n\r\n// // Inject styles and set up MutationObserver on the client\r\n// if (typeof window !== \"undefined\") {\r\n//   injectStyles()\r\n\r\n//   const observer = new MutationObserver((mutations) => {\r\n//     mutations.forEach((mutation) => {\r\n//       if (mutation.type === \"childList\") {\r\n//         mutation.addedNodes.forEach((node) => {\r\n//           if (node instanceof HTMLElement && node.hasAttribute(\"data-bro-toastify\")) {\r\n//             const position = node.getAttribute(\"data-position\") || \"top-right\"\r\n//             const newestOnTop = node.getAttribute(\"data-newest-on-top\") !== \"false\"\r\n//             const dismissible = node.getAttribute(\"data-dismissible\") !== \"false\"\r\n\r\n//             initToastContainer(position, newestOnTop, dismissible)\r\n//           }\r\n//         })\r\n//       }\r\n//     })\r\n//   })\r\n\r\n//   observer.observe(document.body, { childList: true, subtree: true })\r\n// }\r\n\r\n// // Global state for toast management\r\n// const toastState = {\r\n//   containers: new Map<string, HTMLElement>(),\r\n//   activeToasts: new Map<string, HTMLElement>(),\r\n//   listeners: {\r\n//     create: null as { off: () => void } | null,\r\n//     dismiss: null as { off: () => void } | null,\r\n//   },\r\n//   initialized: new Set<string>(),\r\n// }\r\n\r\n// // Initialize toast container\r\n// function initToastContainer(position: string, newestOnTop: boolean, dismissible: boolean) {\r\n//   if (typeof window === \"undefined\") return\r\n\r\n//   const configKey = `${position}-${newestOnTop}-${dismissible}`\r\n//   if (toastState.initialized.has(configKey)) return\r\n\r\n//   console.log(\"Initializing toast container:\", { position, newestOnTop, dismissible })\r\n//   toastState.initialized.add(configKey)\r\n\r\n//   let container = document.querySelector(`.broToastify-container.broToastify-${position}`) as HTMLDivElement\r\n//   if (!container) {\r\n//     container = document.createElement(\"div\")\r\n//     container.className = `broToastify-container broToastify-${position}`\r\n//     container.style.display = \"flex\"\r\n//     document.body.appendChild(container)\r\n//   }\r\n\r\n//   toastState.containers.set(position, container)\r\n\r\n//   if (toastState.listeners.create) toastState.listeners.create.off()\r\n//   if (toastState.listeners.dismiss) toastState.listeners.dismiss.off()\r\n\r\n//   toastState.listeners.create = on(\"create\", (toast: BroToastify) => {\r\n//     if (!container || !toast) return\r\n\r\n//     let toastElement = toastState.activeToasts.get(toast.id)\r\n//     if (!toastElement) {\r\n//       toastElement = document.createElement(\"div\")\r\n//       toastElement.id = `broToastify-${toast.id}`\r\n//       toastElement.className = `broToastify-notification broToastify-${toast.type}`\r\n//       toastElement.setAttribute(\"data-id\", toast.id)\r\n\r\n//       if (newestOnTop) {\r\n//         container.prepend(toastElement)\r\n//       } else {\r\n//         container.appendChild(toastElement)\r\n//       }\r\n\r\n//       toastState.activeToasts.set(toast.id, toastElement)\r\n//     }\r\n\r\n//     toastElement.innerHTML = `\r\n//       <div class=\"broToastify-title\">${toast.title || \"\"}</div>\r\n//       <div class=\"broToastify-message\">${toast.message}</div>\r\n//       ${dismissible ? `<button class=\"broToastify-close\" aria-label=\"Close\">×</button>` : \"\"}\r\n//     `\r\n\r\n//     if (dismissible) {\r\n//       const closeButton = toastElement.querySelector(\".broToastify-close\")\r\n//       if (closeButton) {\r\n//         closeButton.addEventListener(\"click\", () => {\r\n//           if (container && toastElement) {\r\n//             container.removeChild(toastElement)\r\n//             toastState.activeToasts.delete(toast.id)\r\n//             coreToast.dismiss(toast.id)\r\n//           }\r\n//         })\r\n//       }\r\n//     }\r\n\r\n//     if (toast.duration && toast.duration > 0) {\r\n//       setTimeout(() => {\r\n//         if (container && toastElement && container.contains(toastElement)) {\r\n//           container.removeChild(toastElement)\r\n//           toastState.activeToasts.delete(toast.id)\r\n//         }\r\n//       }, toast.duration)\r\n//     }\r\n//   })\r\n\r\n//   toastState.listeners.dismiss = on(\"dismiss\", (toast: BroToastify) => {\r\n//     const id = toast.id\r\n//     const toastElement = toastState.activeToasts.get(id)\r\n//     if (toastElement && container && container.contains(toastElement)) {\r\n//       container.removeChild(toastElement)\r\n//       toastState.activeToasts.delete(id)\r\n//     }\r\n//   })\r\n// }\r\n\r\n// // Export the core toast for direct usage\r\n// export const toast = coreToast\r\n\r\n// // Hook for using toast (for client components)\r\n// export const broToastify = () => {\r\n//   return {\r\n//     show: (message: string, options?: Partial<BroToastifyToastifyOptions>) => coreToast.show(message, options),\r\n//     success: (message: string, options?: Partial<BroToastifyToastifyOptions>) => coreToast.success(message, options),\r\n//     error: (message: string, options?: Partial<BroToastifyToastifyOptions>) => coreToast.error(message, options),\r\n//     info: (message: string, options?: Partial<BroToastifyToastifyOptions>) => coreToast.info(message, options),\r\n//     warning: (message: string, options?: Partial<BroToastifyToastifyOptions>) => coreToast.warning(message, options),\r\n//     loading: (message: string, options?: Partial<BroToastifyToastifyOptions>) => coreToast.loading(message, options),\r\n//     promises: (\r\n//       promise: Promise<any>,\r\n//       messages: { loading: string; success: string; error: string },\r\n//       options?: Partial<BroToastifyToastifyOptions>,\r\n//     ) => coreToast.promises(promise, messages, options),\r\n//     isToastActive: (id: string) => coreToast.isToastActive(id),\r\n//     dismiss: (id: string) => coreToast.dismiss(id),\r\n//     clearAll: () => coreToast.clearAll(),\r\n//   }\r\n// }\r\n\r\n// // Export the Toaster component\r\n// export { Toaster }\r\n\r\n// export default toast","\r\nimport toast, { on } from '../../core/bro-toastify';\r\nimport { BroToastify, BroToastifyToastifyOptions } from '../../core/types';\r\nimport { injectStyles } from '../../dom/style';\r\n\r\n// Toast service for Angular\r\nexport class ToastService {\r\n  constructor() {\r\n    // Inject styles when service is instantiated\r\n    if (typeof window !== 'undefined') {\r\n      injectStyles();\r\n    }\r\n  }\r\n\r\n  show(message: string, options?: Partial<BroToastifyToastifyOptions>) {\r\n    return toast.show(message, options);\r\n  }\r\n\r\n  success(message: string, options?: Partial<BroToastifyToastifyOptions>) {\r\n    return toast.success(message, options);\r\n  }\r\n\r\n  error(message: string, options?: Partial<BroToastifyToastifyOptions>) {\r\n    return toast.error(message, options);\r\n  }\r\n\r\n  info(message: string, options?: Partial<BroToastifyToastifyOptions>) {\r\n    return toast.info(message, options);\r\n  }\r\n\r\n  warning(message: string, options?: Partial<BroToastifyToastifyOptions>) {\r\n    return toast.warning(message, options);\r\n  }\r\n\r\n  dismiss(id: string) {\r\n    toast.dismissible(id);\r\n  }\r\n\r\n  clearAll() {\r\n    toast.clearAll();\r\n  }\r\n}\r\n\r\n// Component class for ToastContainer\r\nexport class ToastContainerComponent {\r\n  position: BroToastifyToastifyOptions['position'] = 'top-right';\r\n  newestOnTop: boolean = true;\r\n  toasts: BroToastify[] = [];\r\n\r\n  private createUnsubscribe: (() => void) | null = null;\r\n  private dismissUnsubscribe: (() => void) | null = null;\r\n\r\n  ngOnInit() {\r\n    // Subscribe to toast events\r\n    const createSubscription = on('create', (toast: BroToastify) => {\r\n      if (toast.position === this.position) {\r\n        if (this.newestOnTop) {\r\n          this.toasts = [toast, ...this.toasts];\r\n        } else {\r\n          this.toasts = [...this.toasts, toast];\r\n        }\r\n      }\r\n    });\r\n    this.createUnsubscribe = createSubscription.off;\r\n\r\n    const dismissSubscription = on('dismiss', (toast: BroToastify) => {\r\n      this.toasts = this.toasts.filter(t => t.id !== toast.id);\r\n    });\r\n    this.dismissUnsubscribe = dismissSubscription.off;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // Cleanup\r\n    if (this.createUnsubscribe) {\r\n      this.createUnsubscribe();\r\n    }\r\n\r\n    if (this.dismissUnsubscribe) {\r\n      this.dismissUnsubscribe();\r\n    }\r\n  }\r\n\r\n  handleDismiss(id: string) {\r\n    toast.dismissible(id);\r\n  }\r\n}\r\n\r\n// Export the core toast for direct usage\r\nexport const angularToast = toast;\r\n","import toast, { on } from '../../core/bro-toastify';\r\nimport { BroToastify, BroToastifyToastifyOptions, BroToastifyContainerOptions } from '../../core/types';\r\nimport { injectStyles } from '../../dom/style';\r\nimport { createBroToastifyElement } from '../../dom/renderer';\r\nimport { getContainer } from '../../core/container';\r\n\r\n/**\r\n * Initialize the vanilla JS adapter\r\n * @param options Default options for all toasts\r\n */\r\n\r\nexport { injectStyles }\r\n\r\nexport function init(options?: Partial<BroToastifyContainerOptions>): () => void {\r\n    // Inject styles\r\n    if (typeof window !== 'undefined') {\r\n        injectStyles();\r\n    }\r\n\r\n    // Set default options if provided\r\n    if (options) {\r\n        Object.assign(toast, { defaultOptions: options });\r\n    }\r\n\r\n    // Subscribe to toast events\r\n    const createListener = on('create', (toast: BroToastify) => {\r\n        const container = getContainer(toast.position);\r\n        const toastElement = createBroToastifyElement(toast);\r\n\r\n        // Add to container\r\n        if (options?.newestOnTop) {\r\n            container?.prepend(toastElement);\r\n        } else {\r\n            container?.appendChild(toastElement);\r\n        }\r\n\r\n        // Set up dismiss event listener\r\n        const handleDismiss = (e: CustomEvent) => {\r\n            if (e.detail.id === toast.id) {\r\n                toast.dismiss?.(toast.id);\r\n                toastElement.remove();\r\n            }\r\n        };\r\n        document.addEventListener('toast:dismiss', handleDismiss as EventListener);\r\n\r\n        // Auto dismiss\r\n        if (toast.duration && toast.duration > 0) {\r\n            setTimeout(() => {\r\n                toast.dismiss?.(toast.id); // Use dismiss method\r\n                toastElement.remove();\r\n            }, toast.duration);\r\n        }\r\n\r\n        const cleanup = () => {\r\n            document.removeEventListener('toast:dismiss', handleDismiss as EventListener);\r\n        };\r\n        toastElement.addEventListener('remove', cleanup, { once: true });\r\n    });\r\n\r\n    // Cleanup on module unload (optional, if needed)\r\n    return () => {\r\n        createListener.off();\r\n    };\r\n}\r\n\r\n// Export the core toast for direct usage\r\nexport const vanilla = toast;","import { BroToastify, BroToastifyToastifyOptions } from \"../core/types\";\r\nimport { injectStyles, getBroToastifyStyles } from \"./style\";\r\n\r\nexport function createBroToastifyElement(broToastify: BroToastify): HTMLElement {\r\n    const { id, type, message, title, dismissible, customClass } = broToastify;\r\n\r\n    const broToastifyElement = document.createElement(\"div\");\r\n    broToastifyElement.id = `broToastify-${id}`;\r\n    broToastifyElement.className = `broToastify-notification broToastify-${type} ${customClass || \"\"}`;\r\n    broToastifyElement.setAttribute(\"role\", \"alert\");\r\n\r\n    //add title\r\n    if (title) {\r\n        const broToastifyTitleElement = document.createElement('div');\r\n        broToastifyTitleElement.className = 'broToastify-title';\r\n        broToastifyTitleElement.textContent = title;\r\n        broToastifyElement.appendChild(broToastifyTitleElement);\r\n    }\r\n\r\n    //add message\r\n    const broToastifyMessageElement = document.createElement('div');\r\n    broToastifyMessageElement.className = 'broToastify-message';\r\n    broToastifyMessageElement.textContent = message;\r\n    broToastifyElement.appendChild(broToastifyMessageElement);\r\n\r\n    // Add close button if dismissible\r\n    if (dismissible) {\r\n        const closeButton = document.createElement('button');\r\n        closeButton.className = 'broToastify-close';\r\n        closeButton.innerHTML = '&times;';\r\n        closeButton.setAttribute('aria-label', 'Close');\r\n        closeButton.onclick = () => {\r\n            // This will be handled by the core\r\n            const event = new CustomEvent('broToastify:dismiss', { detail: { id } });\r\n            document.dispatchEvent(event);\r\n        };\r\n        broToastifyElement.appendChild(closeButton);\r\n    }\r\n\r\n    //handle click event\r\n    if (broToastify.onClick) {\r\n        broToastifyElement.addEventListener('click', (e) => {\r\n            // Don't trigger if clicking the close button\r\n            if (!(e.target as HTMLElement).closest('.broToastify-close')) {\r\n                broToastify.onClick!();\r\n            }\r\n        });\r\n        broToastifyElement.style.cursor = 'pointer';\r\n    }\r\n    return broToastifyElement;\r\n}\r\n\r\n// Ensure styles are injected\r\nexport function initializeRenderer(): void {\r\n    injectStyles();\r\n}","export * from './core/bro-toastify';\r\nexport * from './core/types';\r\n\r\n// Export framework adapters\r\nimport * as ReactAdapter from './adapters/react';\r\nimport * as AngularAdapter from './adapters/angular';\r\nimport * as VanillaAdapter from './adapters/vanilla';\r\n// import * as VueAdapter from './adapters/vue';\r\n// import * as SvelteAdapter from './adapters/svelte';\r\n\r\n// Named exports for each framework\r\nexport const React = ReactAdapter;\r\nexport const Angular = AngularAdapter;\r\nexport const Vanilla = VanillaAdapter;\r\n// export const Vue = VueAdapter;\r\n// export const Svelte = SvelteAdapter;\r\n\r\n// Also create a default export for convenience\r\nexport { Toaster } from './adapters/react'; // Adjust the path if necessary\r\nimport toast from './core/bro-toastify';\r\nexport default toast;"],"names":["containers","Map","createContainer","position","window","has","existingContainer","get","document","body","contains","appendChild","console","debug","container","createElement","className","setAttribute","style","top","right","left","transform","bottom","error","set","getAnimationKeyframes","type","direction","translateFrom","translateTo","stylesInjected","injectStyles","styleId","getElementById","id","innerHTML","head","log","defaultOptions","duration","dismissible","pauseOnHover","customIcon","undefined","customClass","broToastifys","listeners","generateId","Date","now","toString","Math","random","substring","createBroToastify","options","mergedOptions","BroToastify","createdAt","emit","setTimeout","dismissBroToastify","Array","from","values","find","t","delete","onClose","clearBroToastify","forEach","broToastify","on","event","callback","push","off","callbacks","index","indexOf","splice","data","toast","show","message","success","info","warning","loading","promises","promise","then","result","catch","isToastActive","dismiss","clearAll","Toaster","_ref","newestOnTop","toasts","setToasts","useState","mounted","setMounted","useEffect","createListener","prev","dismissListener","filter","timers","map","timer","clearTimeout","createPortal","React","key","title","onClick","displayName","coreToast","messages","angularToast","constructor","createUnsubscribe","dismissUnsubscribe","ngOnInit","createSubscription","this","dismissSubscription","ngOnDestroy","handleDismiss","vanilla","Object","assign","getContainer","toastElement","broToastifyElement","broToastifyTitleElement","textContent","broToastifyMessageElement","closeButton","onclick","CustomEvent","detail","dispatchEvent","addEventListener","e","target","closest","cursor","createBroToastifyElement","prepend","remove","cleanup","removeEventListener","once","ReactAdapter","Angular","AngularAdapter","Vanilla","VanillaAdapter"],"mappings":"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"}